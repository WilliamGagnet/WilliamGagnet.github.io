{
  "skills": {
  "section 1": {
    "title": "Skills and Experience",
    "text": "Over the past few years, I‚Äôve worked with a wide range of tools, languages, and frameworks both through academic work and personal projects. Below are some of the core skills I‚Äôve built up and the projects or experiences that helped shape them. Each one reflects time spent learning, tinkering, debugging, and actually building things, the best way I know to grow as a developer!"
  },
  "section 2": {
    "title": "üêç Python and Popular Libraries",
    "text": "Python‚Äôs been my go-to language for years now. I‚Äôve used it for everything from building small command-line games to writing machine learning models with libraries like scikit-learn. For data analysis, I‚Äôm comfortable working with pandas and NumPy, and I‚Äôve used them for both personal projects and academic work."
  },
  "section 3": {
    "title": "üéÆ Game Dev and Unity",
    "text": "I‚Äôve been using Unity as my entry point into game development, mostly through personal and collaborative projects. One of my favorite projects so far has been a VR casino made with Unity XR, where I got to work on gameplay interactions, scene setup, and complex C# scripts. Game development hits the sweet spot for me, a mix of programming, design, and creativity. I like that Unity lets me prototype weird ideas quickly, even if half of them break in unexpected ways!"
  },
  "section 4": {
    "title": "üåê Web Dev and Frontend",
    "text": "When it comes to web development, I'm largely self-taught. I‚Äôm comfortable working with core web technologies like HTML, CSS, and JavaScript, as well as frameworks like Flask. One of my most involved projects is Checkpoint-Web, an equipment reservation system built for the Rhodes College Computer Science department. It uses Flask for routing and template rendering, and interfaces with a FastAPI backend and a PostgreSQL database to handle reservations, user accounts, admin roles, and more. This portfolio site you're reading right now is another example of my approach hand-coded from scratch, styled with CSS, and powered by JavaScript that dynamically loads project and skills data from JSON files!"
  },
  "section 5": {
    "title": "üíæ Databases and Backend",
    "text": "I‚Äôve worked with relational databases like PostgreSQL and SQLite in both academic and personal settings. I took a full databases course where I learned the fundamentals of relational algebra, schema design, ER diagrams, and complex SQL queries. I‚Äôm comfortable working directly with raw SQL when needed, but I‚Äôve also used ORMs like SQLAlchemy in Python-based projects to help manage models and queries more cleanly. In some of my work, including Checkpoint-Web, I‚Äôve interacted with a FastAPI backend that served data to a Flask frontend, and I‚Äôve used Swagger UI to explore and test RESTful API endpoints."
  },
  "section 6": {
    "title": "üß∞ Dev tools and Other Skills",
    "text": "I'm comfortable with the tools that make development smoother, faster, and more maintainable. I use Git and GitHub for version control and code hosting, and I‚Äôve taken a full course that emphasized version control workflows including branching, merging, pull requests, and resolving conflicts cleanly. I do most of my work in VS Code, but I‚Äôve also used JetBrains IDEs like PyCharm and IntelliJ for more specialized tasks. I'm comfortable with the command line, whether that‚Äôs cmd, PowerShell, or bash on Linux, and I‚Äôve had some exposure to Docker for containerizing dev environments. I‚Äôm also very comfortable using generative AI tools like ChatGPT and Copilot to assist with brainstorming, debugging, and even code scaffolding when I need to move fast or get unstuck. \n \nI have hands-on experience with Agile methodology from my senior seminar capstone project, where I worked as part of a development team. We practiced iterative development through structured sprints, used Trello to manage tasks and progress, and held regular team meetings to adapt our plans based on progress and feedback. This helped me learn how to stay flexible, work efficiently in a collaborative environment, and deliver working features on a consistent basis."
  }
},
  "projects": [
    {
      "title": "Portfolio Website",
      "description": "A static website hosted with GitHub Pages and used to showcase my relevant skills, education,  resume, and personal info. Website data is separated into a local JSON file and injected into the page via JavaScript, making the site easier to update and maintain without touching the core layout. ",
      "technologies": ["HTML", "CSS", "JavaScript"],
      "link": "https://github.com/WilliamGagnet/WilliamGagnet.github.io",
      "image": "../assets/images/WilliamGagnetGitHubioPic.png"
    },
    {
      "title": "Checkpoint-Web",
      "description": "A Flask-based web app designed for managing equipment reservations in the Rhodes College CS department. Built with Flask and PostgreSQL, it allows students to check out and return equipment, view their borrowing history, and receive automated notifications. Admins can manage inventory, user roles, and generate usage reports. Designed to streamline accountability and access to shared tech resources. Collaborators: AJ Kovach, Son Nguyen, Dimash Zhanbyrshy, Enkhee Gantulga, Jules Hall.",
      "technologies": ["HTML", "CSS", "JavaScript", "Python", "Flask"],
      "link": "https://github.com/Rhodes-CS-comp486/checkpoint-web",
      "image": "../assets/images/equipment_dashboard.png"
    },
    {
      "title": "VR Casino",
      "description": "A Unity-powered VR experience simulating a small-scale casino environment with interactive games. Users can explore the space in VR and play functioning versions of roulette, slot machines, and bingo. Built with first-person VR controls, the project focused on creating a navigable 3D environment and implementing basic game logic for a few core casino experiences. While features like ambient sound and physics-based chips were out of scope, the final result offered a functional and immersive single-player casino prototype. Collaborators: Mohid Tanveer, Crosby McMahon, Umer Tahir.",
      "technologies": ["Unity", "C#", "XR"],
      "link": "https://github.com/mohid-tanveer/VRCasino",
      "image": "../assets/images/VR-Casino-screenshot.png"
    },
    {
      "title": "Hit Game Predictor (Machine Learning Final Project)",
      "description": "A machine learning classifier that predicts whether a video game will sell over one million copies based on metadata. Built and evaluated both logistic regression and decision tree models using scikit-learn, with feature engineering and exploratory analysis handled via pandas and NumPy. The project involved one-hot encoding, data cleaning, class balancing, and performance evaluation using precision, recall, F1-score, and ROC-AUC. Demonstrates practical end-to-end ML pipeline development and model comparison.",
      "technologies": ["Python", "scikit-learn", "pandas", "NumPy"],
      "link": "https://github.com/WilliamGagnet/ml-final-project/tree/master",
      "image": "../assets/images/machine-learning-final-project.png"
    },
    {
      "title": "Sierpinski Triangle Turtle",
      "description": "A Python program that uses Turtle Graphics to draw the Sierpinski Triangle fractal through a randomized point-plotting algorithm. The program starts with a large triangle defined by three points, then repeatedly generates midpoints between a starting point and one of the triangle‚Äôs vertices to plot the fractal pattern. Includes geometric checks to ensure points are drawn within bounds. A creative exploration of recursion-adjacent fractal behavior and 2D graphics using pure Python.",
      "technologies": ["Python"],
      "link": "https://github.com/WilliamGagnet/SierpinskiTriangle/tree/main",
      "image": "../assets/images/sierpinski-triangle-screenshot.png"

    },
    {
      "title": "Blackjack",
      "description": "A terminal-based Blackjack game built in Python using object-oriented programming principles. Features include deck shuffling, variable number of decks, variable number of player, hit/stand logic, automated dealer behavior, and score tracking. Created for a data analysis class and polished with the help of GitHub Copilot for certain features, this project demonstrates practical OOP design in a simple game environment.",
      "technologies": ["Python"],
      "link": "https://github.com/WilliamGagnet/blackjack",
      "image": "../assets/images/blackjack_square.png"
    },
    {
      "title": "Bloodborne Hangman",
      "description": "A classic Hangman game playable entirely in the terminal. Developed in Python with a focus on control flow, string manipulation, and user input handling. Features a Bloodborne inspired set of words!",
      "technologies": ["Python"],
      "image": "../assets/images/BloodborneHangman.png",
      "link": "https://github.com/WilliamGagnet/BloodborneHangman"
    }
  ]
}